import collections
from collections.abc import Generator

from _typeshed import Incomplete

LXML_AVAILABLE: bool
inflector: Incomplete
log: Incomplete
namedtuple = collections.namedtuple
CHUNK_SIZE: int
DATABASE_MAX_STRING_SIZE: int
DATABASE_MAX_STRING_SIZE_PRETTY: str
gzip_magic: bytes
bz2_magic: bytes
DEFAULT_ENCODING: Incomplete
NULL_CHAR: bytes
BINARY_CHARS: Incomplete
FILENAME_VALID_CHARS: str
RW_R__R__: Incomplete
RWXR_XR_X: Incomplete
RWXRWXRWX: Incomplete
XML: Incomplete
defaultdict = collections.defaultdict

# def xml_to_string(elem, pretty: bool = ...): ...
# def xml_element_compare(elem1, elem2): ...
# def xml_element_list_compare(elem_list1, elem_list2): ...
# def xml_element_to_dict(elem): ...
# def pretty_print_xml(elem, level: int = ...): ...
# def get_file_size(value, default: Incomplete | None = ...): ...
# def shrink_stream_by_size(value, size, join_by: bytes = ..., left_larger: bool = ..., beginning_on_size_error: bool = ..., end_on_size_error: bool = ...): ...
# def shrink_and_unicodify(stream): ...
# def shrink_string_by_size(value, size, join_by: str = ..., left_larger: bool = ..., beginning_on_size_error: bool = ..., end_on_size_error: bool = ...): ...
# def pretty_print_time_interval(time: bool = ..., precise: bool = ..., utc: bool = ...): ...
# def pretty_print_json(json_data, is_json_string: bool = ...): ...

valid_chars: Incomplete
mapped_chars: Incomplete

# def restore_text(text, character_map=...): ...
# def sanitize_text(text, valid_characters=..., character_map=..., invalid_character: str = ...): ...
# def sanitize_lists_to_string(values, valid_characters=..., character_map=..., invalid_character: str = ...): ...
# def sanitize_param(value, valid_characters=..., character_map=..., invalid_character: str = ...): ...

valid_filename_chars: Incomplete
invalid_filenames: Incomplete

# def sanitize_for_filename(text, default: Incomplete | None = ...): ...
# def find_instance_nested(item, instances, match_key: Incomplete | None = ...): ...
# def mask_password_from_url(url): ...
# def ready_name_for_url(raw_name): ...
# def which(file): ...
# def in_directory(file, directory, local_path_module=...): ...
# def merge_sorted_iterables(operator, *iterables) -> None: ...

# def rst_to_html(s, error: bool = ...): ...
# def xml_text(root, name: Incomplete | None = ...): ...
# def parse_resource_parameters(resource_param_file): ...

truthy: Incomplete
falsy: Incomplete

# def asbool(obj): ...
# def string_as_bool(string): ...
# def string_as_bool_or_none(string): ...
# def listify(item, do_strip: bool = ...): ...
# def commaify(amount): ...
# def roundify(amount, sfs: int = ...): ...
# def unicodify(value, encoding=..., error: str = ..., strip_null: bool = ..., log_exception: bool = ...): ...
# def smart_str(s, encoding=..., strings_only: bool = ..., errors: str = ...): ...
# def strip_control_characters(s): ...
# def object_to_string(obj): ...
# def string_to_object(s): ...
# def clean_multiline_string(multiline_string, sep: str = ...): ...

# def compare_urls(url1, url2, compare_scheme: bool = ..., compare_hostname: bool = ..., compare_path: bool = ...): ...
# def read_build_sites(filename, check_builds: bool = ...): ...
# def relativize_symlinks(path, start: Incomplete | None = ..., followlinks: bool = ...) -> None: ...
# def stringify_dictionary_keys(in_dict): ...
# def mkstemp_ln(src, prefix: str = ...): ...
# def umask_fix_perms(path, umask, unmasked_perms, gid: Incomplete | None = ...) -> None: ...
# def docstring_trim(docstring): ...
# def nice_size(size): ...
# def size_to_bytes(size): ...
# def send_mail(frm, to, subject, body, config, html: Incomplete | None = ...) -> None: ...
# def force_symlink(source, link_name) -> None: ...
# def move_merge(source, target): ...
# def safe_str_cmp(a, b): ...

galaxy_root_path: Incomplete
galaxy_samples_path: Incomplete

# def galaxy_directory(): ...
# def galaxy_samples_directory(): ...
# def config_directories_from_setting(directories_setting, galaxy_root=...): ...
# def parse_int(value, min_val: Incomplete | None = ..., max_val: Incomplete | None = ..., default: Incomplete | None = ..., allow_none: bool = ...): ...
# def parse_non_hex_float(s): ...
# def build_url(base_url, port: int = ..., scheme: str = ..., pathspec: Incomplete | None = ..., params: Incomplete | None = ..., doseq: bool = ...): ...
# def url_get(base_url, auth: Incomplete | None = ..., pathspec: Incomplete | None = ..., params: Incomplete | None = ..., max_retries: int = ..., backoff_factor: int = ...): ...
# def download_to_file(url, dest_file_path, timeout: int = ..., chunk_size=...) -> None: ...

# def get_executable(): ...
