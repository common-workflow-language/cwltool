from _typeshed import Incomplete
from galaxy import util as util
from galaxy.util.tool_shed import encoding_util as encoding_util, xml_util as xml_util

log: Incomplete
REPOSITORY_OWNER: str
MIGRATE_DIR: Incomplete
TOOL_MIGRATION_SCRIPTS_DIR: Incomplete
TOOL_MIGRATION_VERSIONS_DIR: Incomplete

def accumulate_tool_dependencies(
    tool_shed_accessible, tool_dependencies, all_tool_dependencies
): ...
def check_for_missing_tools(
    app, tool_panel_configs, latest_tool_migration_script_number
): ...
def check_tool_tag_set(elem, migrated_tool_configs_dict, missing_tool_configs_dict): ...
def generate_clone_url_for_installed_repository(app, repository): ...
def generate_clone_url_for_repository_in_tool_shed(user, repository): ...
def generate_clone_url_from_repo_info_tup(app, repo_info_tup): ...
def get_non_shed_tool_panel_configs(app): ...
def get_repository_dependencies(
    app, tool_shed_url, repository_name, repository_owner, changeset_revision
): ...
def get_protocol_from_tool_shed_url(tool_shed_url): ...
def get_tool_dependencies(
    app, tool_shed_url, repository_name, repository_owner, changeset_revision
): ...
def get_tool_shed_repository_ids(as_string: bool = ..., **kwd): ...
def get_tool_shed_url_from_tool_shed_registry(app, tool_shed): ...
def get_tool_shed_repository_url(app, tool_shed, owner, name): ...
def get_user_by_username(app, username): ...
def handle_galaxy_url(trans, **kwd): ...
def handle_tool_shed_url_protocol(app, shed_url): ...
def parse_repository_dependency_tuple(
    repository_dependency_tuple, contains_error: bool = ...
): ...
def remove_port_from_tool_shed_url(tool_shed_url): ...
def remove_protocol_and_port_from_tool_shed_url(tool_shed_url): ...
def remove_protocol_and_user_from_clone_url(repository_clone_url): ...
def remove_protocol_from_tool_shed_url(tool_shed_url): ...
