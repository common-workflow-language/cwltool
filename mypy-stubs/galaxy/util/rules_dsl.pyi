import abc
from _typeshed import Incomplete
from typing import List, Type

def get_rules_specification(): ...
def apply_regex(
    regex,
    target,
    data,
    replacement: Incomplete | None = ...,
    group_count: Incomplete | None = ...,
): ...

class BaseRuleDefinition(metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def rule_type(self): ...
    @abc.abstractmethod
    def validate_rule(self, rule): ...
    @abc.abstractmethod
    def apply(self, rule, data, sources): ...

class AddColumnMetadataRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnGroupTagValueRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnConcatenateRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnBasenameRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnRegexRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnRownumRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnValueRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddColumnSubstrRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class RemoveColumnsRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddFilterRegexRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddFilterCountRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddFilterEmptyRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddFilterMatchesRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class AddFilterCompareRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class SortRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class SwapColumnsRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

class SplitColumnsRuleDefinition(BaseRuleDefinition):
    rule_type: str
    def validate_rule(self, rule) -> None: ...
    def apply(self, rule, data, sources): ...

def flat_map(f, items): ...

class RuleSet:
    raw_rules: Incomplete
    raw_mapping: Incomplete
    def __init__(self, rule_set_as_dict) -> None: ...
    @property
    def rules(self): ...
    def apply(self, data, sources): ...
    @property
    def has_errors(self): ...
    @property
    def mapping_as_dict(self): ...
    @property
    def identifier_columns(self): ...
    @property
    def collection_type(self): ...
    @property
    def display(self): ...

RULES_DEFINITION_CLASSES: List[Type[BaseRuleDefinition]]
RULES_DEFINITIONS: Incomplete
