from collections.abc import Generator

from _typeshed import Incomplete

from .checkers import bz2 as bz2
from .checkers import is_bz2 as is_bz2
from .checkers import is_gzip as is_gzip

log: Incomplete

def get_fileobj(
    filename, mode: str = ..., compressed_formats: Incomplete | None = ...
): ...
def get_fileobj_raw(
    filename, mode: str = ..., compressed_formats: Incomplete | None = ...
): ...
def file_iter(
    fname, sep: Incomplete | None = ...
) -> Generator[Incomplete, None, None]: ...

class CompressedFile:
    @staticmethod
    def can_decompress(file_path): ...
    file_type: str
    file_name: Incomplete
    type: Incomplete
    archive: Incomplete
    def __init__(self, file_path, mode: str = ...) -> None: ...
    @property
    def common_prefix_dir(self): ...
    def extract(self, path): ...
    def safemembers(self) -> Generator[Incomplete, None, None]: ...
    def getmembers_tar(self): ...
    def getmembers_zip(self): ...
    def getname_tar(self, item): ...
    def getname_zip(self, item): ...
    def getmember(self, name): ...
    def getmembers(self): ...
    def getname(self, member): ...
    def isdir(self, member): ...
    def isdir_tar(self, member): ...
    def isdir_zip(self, member): ...
    def isfile(self, member): ...
    def open_tar(self, filepath, mode): ...
    def open_zip(self, filepath, mode): ...
    def zipfile_ok(self, path_to_archive): ...
