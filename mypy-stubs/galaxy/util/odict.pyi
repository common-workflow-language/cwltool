from collections import UserDict
from collections.abc import Generator

from _typeshed import Incomplete

dict_alias = dict

class odict(UserDict):
    def __init__(self, dict: Incomplete | None = ...) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __setitem__(self, key, item) -> None: ...
    def clear(self) -> None: ...
    def copy(self): ...
    def items(self): ...
    def keys(self): ...
    def popitem(self): ...
    def setdefault(self, key, failobj: Incomplete | None = ...): ...
    def update(self, dict) -> None: ...
    def values(self): ...
    def iterkeys(self): ...
    def itervalues(self) -> Generator[Incomplete, None, None]: ...
    def iteritems(self) -> Generator[Incomplete, None, None]: ...
    def __iter__(self): ...
    def reverse(self) -> None: ...
    def insert(self, index, key, item) -> None: ...
