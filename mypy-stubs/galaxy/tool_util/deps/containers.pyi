# Stubs for galaxy.tools.deps.containers (Python 3.4)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Dict, Optional, Sequence

from .dependencies import AppInfo, JobInfo, ToolInfo
from .requirements import (
    DEFAULT_CONTAINER_RESOLVE_DEPENDENCIES as DEFAULT_CONTAINER_RESOLVE_DEPENDENCIES,
)
from .requirements import DEFAULT_CONTAINER_SHELL as DEFAULT_CONTAINER_SHELL
from .requirements import ContainerDescription

log = ...  # type: Any
DOCKER_CONTAINER_TYPE = ...  # type: str
SINGULARITY_CONTAINER_TYPE = ...  # type: str
DEFAULT_CONTAINER_TYPE = ...  # type: Any
ALL_CONTAINER_TYPES = ...  # type: Any
LOAD_CACHED_IMAGE_COMMAND_TEMPLATE = ...  # type: str

class ContainerRegistry:
    resolver_classes = ...  # type: Any
    enable_beta_mulled_containers = ...  # type: Any
    app_info: AppInfo
    container_resolvers = ...  # type: Any
    def __init__(self, app_info: AppInfo) -> None: ...
    def find_best_container_description(
        self, enabled_container_types: Sequence[str], tool_info: ToolInfo
    ) -> ContainerDescription | None: ...

class Container:
    container_id = ...  # type: Any
    app_info = ...  # type: Any
    tool_info = ...  # type: Any
    destination_info = ...  # type: Any
    job_info = ...  # type: Any
    container_description = ...  # type: Any
    def __init__(
        self,
        container_id: str,
        app_info: AppInfo,
        tool_info: ToolInfo,
        destination_info: Dict[str, str],
        job_info: JobInfo,
        container_description: ContainerDescription,
    ) -> None: ...
    @property
    def resolve_dependencies(self) -> bool: ...
    @property
    def shell(self) -> str: ...
    def containerize_command(self, command: str) -> str: ...

# def docker_cache_path(cache_directory, container_id): ...
