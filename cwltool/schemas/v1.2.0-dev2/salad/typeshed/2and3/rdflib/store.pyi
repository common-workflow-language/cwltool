# Stubs for rdflib.store (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
from rdflib.events import Event
from io import StringIO as BytesIO

class StoreCreatedEvent(Event): ...
class TripleAddedEvent(Event): ...
class TripleRemovedEvent(Event): ...

class NodePickler:
    def __init__(self): ...
    def register(self, object, id): ...
    def loads(self, s): ...
    def dumps(self, obj, protocol=None, bin=None): ...

class Store:
    context_aware = ... # type: Any
    formula_aware = ... # type: Any
    transaction_aware = ... # type: Any
    graph_aware = ... # type: Any
    dispatcher = ... # type: Any
    def __init__(self, configuration=None, identifier=None): ...
    node_pickler = ... # type: Any
    def create(self, configuration): ...
    def open(self, configuration, create=False): ...
    def close(self, commit_pending_transaction=False): ...
    def destroy(self, configuration): ...
    def gc(self): ...
    def add(self, __tuple_arg_2, context, quoted=False): ...
    def addN(self, quads): ...
    def remove(self, __tuple_arg_2, context=None): ...
    def triples_choices(self, __tuple_arg_2, context=None): ...
    def triples(self, triple_pattern, context=None): ...
    def __len__(self, context=None): ...
    def contexts(self, triple=None): ...
    def query(self, query, initNs, initBindings, queryGraph, **kwargs): ...
    def update(self, update, initNs, initBindings, queryGraph, **kwargs): ...
    def bind(self, prefix, namespace): ...
    def prefix(self, namespace): ...
    def namespace(self, prefix): ...
    def namespaces(self): ...
    def commit(self): ...
    def rollback(self): ...
    def add_graph(self, graph): ...
    def remove_graph(self, graph): ...
