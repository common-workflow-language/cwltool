name: Continuous integration tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  singularity_version: 3.8.3

jobs:

  tox:
    name: CI tests via Tox

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        py-ver-major: [3]
        py-ver-minor: [6, 7, 8, 9, 10]
        step: [lint, unit, bandit, mypy]
        exclude:
          - py-ver-major: 3
            py-ver-minor: 6
            step: mypy

    env:
      py-semver: ${{ format('{0}.{1}', matrix.py-ver-major, matrix.py-ver-minor) }}
      TOXENV: ${{ format('py{0}{1}-{2}', matrix.py-ver-major, matrix.py-ver-minor, matrix.step) }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Singularity
        if: ${{ matrix.step == 'unit' || matrix.step == 'mypy' }}
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: ${{ env.singularity_version }}

      - name: Give the test runner user a name to make provenance happy.
        if: ${{ matrix.step == 'unit' || matrix.step == 'mypy' }}
        run: sudo usermod -c 'CI Runner' $(whoami)

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py-semver }}
          cache: pip
          cache-dependency-path: |
            requirements.txt
            tox.ini

      - name: Upgrade setuptools and install tox
        run: |
          pip install -U pip setuptools wheel
          pip install tox tox-gh-actions

      - name: MyPy cache
        if: ${{ matrix.step == 'mypy' }}
        uses: actions/cache@v3
        with:
          path: .mypy_cache/${{ env.py-semver }}
          key: mypy-${{ env.py-semver }}

      - name: Test with tox
        run: tox

      - name: Upload coverage to Codecov
        if: ${{ matrix.step == 'unit' }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true

  tox-style:
    name: CI linters via Tox

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        step: [lintreadme, shellcheck, pydocstyle]

    env:
      py-semver: "3.10"
      TOXENV: ${{ format('py310-{0}', matrix.step) }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.py-semver }}
          cache: pip

      - name: Upgrade setuptools and install tox
        run: |
          pip install -U pip setuptools wheel
          pip install tox tox-gh-actions

      - if: ${{ matrix.step == 'pydocstyle' && github.event_name == 'pull_request'}}
        name: Create local branch for diff-quality for PRs
        run: git branch ${{github.base_ref}} origin/${{github.base_ref}}

      - name: Test with tox
        run: tox

  conformance_tests:
    name: CWL spec conformance tests

    runs-on: ubuntu-20.04

    strategy:
      matrix:
        cwl-version: [v1.0, v1.1, v1.2]
        container: [docker, singularity, podman]
        extras: [""]
        include:
          - cwl-version: v1.2
            container: docker
            extras: "--fast-parser"

    steps:
      - uses: actions/checkout@v3

      - name: Set up Singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: ${{ env.singularity_version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: pip

      - name: Run CWL conformance tests ${{ matrix.cwl-version }}
        env:
          version: ${{ matrix.cwl-version }}
          container: ${{ matrix.container }}
          spec_branch: main
          CWLTOOL_OPTIONS: ${{ matrix.extras }}
        run: ./conformance-test.sh

  release_test:
    name: cwltool release test

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Set up Singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: ${{ env.singularity_version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"  # quoted, otherwise that turns into the number 3.1
          cache: pip
          cache-dependency-path: |
            requirements.txt
            test-requirements.txt

      - name: Give the test runner user a name to make provenance happy.
        run: sudo usermod -c 'CI Runner' $(whoami)

      - name: Install packages
        run: |
          pip install -U pip setuptools wheel
          pip install virtualenv

      - name: Release test
        env:
          RELEASE_SKIP: head
        run: ./release-test.sh

  build_test_container:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build & test cwltool_module container
        run: ./build-cwltool-docker.sh

  macos:
    name: CI test on macos-latest
    runs-on: macos-latest
    env:
      TOXENV: py310-unit
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: pip
          cache-dependency-path: |
            requirements.txt
            tox.ini
      - name: Upgrade setuptools and install tox
        run: |
          pip install -U pip setuptools wheel
          pip install tox tox-gh-actions
      # # docker for mac install is not currently stable
      # - name: 'SETUP MacOS: load Homebrew cache'
      #   uses: actions/cache@v3
      #   if: runner.os == 'macOS'
      #   with:
      #      path: |
      #        ~/Library/Caches/Homebrew/downloads/*--Docker.dmg
      #      key: brew-actions-setup-docker-1.0.11
      #      restore-keys: brew-actions-setup-docker-
      # - name: setup docker on macos (default stable version)
      #   uses: docker-practice/actions-setup-docker@master
      - name: Test with tox
        run: tox
      - name: Upload coverage to Codecov
        if: ${{ matrix.step == 'unit' }}
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
