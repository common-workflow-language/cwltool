# Stubs for future.utils (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

PY3: Any
PY2: Any
PY26: Any
PYPY: Any

def python_2_unicode_compatible(cls): ...
def with_metaclass(meta: Any, *bases: Any): ...
def bstr(s: Any): ...
def bord(s: Any): ...

def tobytes(s: Any): ...
def native_str_to_bytes(s: Any, encoding: str = ...): ...
def bytes_to_native_str(b: Any, encoding: str = ...): ...
def text_to_native_str(t: Any, encoding: Optional[Any] = ...): ...
def lrange(*args: Any, **kwargs: Any): ...
def lzip(*args: Any, **kwargs: Any): ...
def lmap(*args: Any, **kwargs: Any): ...
def lfilter(*args: Any, **kwargs: Any): ...

def isidentifier(s: Any, dotted: bool = ...): ...
def viewitems(obj: Any, **kwargs: Any): ...
def viewkeys(obj: Any, **kwargs: Any): ...
def viewvalues(obj: Any, **kwargs: Any): ...
def iteritems(obj: Any, **kwargs: Any): ...
def iterkeys(obj: Any, **kwargs: Any): ...
def itervalues(obj: Any, **kwargs: Any): ...
def bind_method(cls, name: Any, func: Any) -> None: ...
def getexception(): ...
def raise_(tp: Any, value: Optional[Any] = ..., tb: Optional[Any] = ...) -> None: ...
def raise_from(exc: Any, cause: Any) -> None: ...
def raise_with_traceback(exc: Any, traceback: Any = ...) -> None: ...
reraise = raise_

def implements_iterator(cls): ...

get_next: Any

def encode_filename(filename: Any): ...
def is_new_style(cls): ...
native_str = str
native_bytes = bytes

def istext(obj: Any): ...
def isbytes(obj: Any): ...
def isnewbytes(obj: Any): ...
def isint(obj: Any): ...
def native(obj: Any): ...

exec_: Any

def old_div(a: Any, b: Any): ...
def as_native_str(encoding: str = ...): ...
def listvalues(d: Any): ...
def listitems(d: Any): ...
def ensure_new_type(obj: Any): ...
