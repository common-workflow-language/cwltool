# Stubs for networkx.algorithms.shortest_paths.weighted (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def dijkstra_path(G, source, target, weight: str = ...): ...
def dijkstra_path_length(G, source, target, weight: str = ...): ...
def single_source_dijkstra_path(G, source, cutoff: Optional[Any] = ..., weight: str = ...): ...
def single_source_dijkstra_path_length(G, source, cutoff: Optional[Any] = ..., weight: str = ...): ...
def single_source_dijkstra(G, source, target: Optional[Any] = ..., cutoff: Optional[Any] = ..., weight: str = ...): ...
def multi_source_dijkstra_path(G, sources, cutoff: Optional[Any] = ..., weight: str = ...): ...
def multi_source_dijkstra_path_length(G, sources, cutoff: Optional[Any] = ..., weight: str = ...): ...
def multi_source_dijkstra(G, sources, target: Optional[Any] = ..., cutoff: Optional[Any] = ..., weight: str = ...): ...
def dijkstra_predecessor_and_distance(G, source, cutoff: Optional[Any] = ..., weight: str = ...): ...
def all_pairs_dijkstra(G, cutoff: Optional[Any] = ..., weight: str = ...): ...
def all_pairs_dijkstra_path_length(G, cutoff: Optional[Any] = ..., weight: str = ...): ...
def all_pairs_dijkstra_path(G, cutoff: Optional[Any] = ..., weight: str = ...): ...
def bellman_ford_predecessor_and_distance(G, source, target: Optional[Any] = ..., cutoff: Optional[Any] = ..., weight: str = ...): ...
def bellman_ford_path(G, source, target, weight: str = ...): ...
def bellman_ford_path_length(G, source, target, weight: str = ...): ...
def single_source_bellman_ford_path(G, source, cutoff: Optional[Any] = ..., weight: str = ...): ...
def single_source_bellman_ford_path_length(G, source, cutoff: Optional[Any] = ..., weight: str = ...): ...
def single_source_bellman_ford(G, source, target: Optional[Any] = ..., cutoff: Optional[Any] = ..., weight: str = ...): ...
def all_pairs_bellman_ford_path_length(G, cutoff: Optional[Any] = ..., weight: str = ...): ...
def all_pairs_bellman_ford_path(G, cutoff: Optional[Any] = ..., weight: str = ...): ...
def goldberg_radzik(G, source, weight: str = ...): ...
def negative_edge_cycle(G, weight: str = ...): ...
def bidirectional_dijkstra(G, source, target, weight: str = ...): ...
def johnson(G, weight: str = ...): ...
