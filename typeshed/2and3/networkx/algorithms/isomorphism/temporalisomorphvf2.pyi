# Stubs for networkx.algorithms.isomorphism.temporalisomorphvf2 (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .isomorphvf2 import DiGraphMatcher, GraphMatcher
from typing import Any, Optional

class TimeRespectingGraphMatcher(GraphMatcher):
    temporal_attribute_name: Any = ...
    delta: Any = ...
    def __init__(self, G1, G2, temporal_attribute_name, delta) -> None: ...
    def one_hop(self, Gx, Gx_node, neighbors): ...
    def two_hop(self, Gx, core_x, Gx_node, neighbors): ...
    def semantic_feasibility(self, G1_node, G2_node): ...

class TimeRespectingDiGraphMatcher(DiGraphMatcher):
    temporal_attribute_name: Any = ...
    delta: Any = ...
    def __init__(self, G1, G2, temporal_attribute_name, delta) -> None: ...
    def get_pred_dates(self, Gx, Gx_node, core_x, pred): ...
    def get_succ_dates(self, Gx, Gx_node, core_x, succ): ...
    def one_hop(self, Gx, Gx_node, core_x, pred, succ): ...
    def two_hop_pred(self, Gx, Gx_node, core_x, pred): ...
    def two_hop_succ(self, Gx, Gx_node, core_x, succ): ...
    def preds(self, Gx, core_x, v, Gx_node: Optional[Any] = ...): ...
    def succs(self, Gx, core_x, v, Gx_node: Optional[Any] = ...): ...
    def test_one(self, pred_dates, succ_dates): ...
    def test_two(self, pred_dates, succ_dates): ...
    def semantic_feasibility(self, G1_node, G2_node): ...
