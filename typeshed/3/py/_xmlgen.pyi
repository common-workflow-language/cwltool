from typing import Any, Optional

def u(s: Any): ...
def unicode(x: Any, errors: Optional[Any] = ...): ...

class NamespaceMetaclass(type):
    def __getattr__(self, name: Any): ...

class Tag(list):
    class Attr:
        def __init__(self, **kwargs: Any) -> None: ...
    attr: Any = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __unicode__(self): ...
    def unicode(self, indent: int = ...): ...

Namespace: Any

class HtmlTag(Tag):
    def unicode(self, indent: int = ...): ...

class html(Namespace):
    __tagclass__: Any = ...
    __stickyname__: bool = ...
    __tagspec__: Any = ...
    class Style:
        def __init__(self, **kw: Any) -> None: ...

class raw:
    uniobj: Any = ...
    def __init__(self, uniobj: Any) -> None: ...

class SimpleUnicodeVisitor:
    write: Any = ...
    cache: Any = ...
    visited: Any = ...
    indent: Any = ...
    curindent: Any = ...
    parents: Any = ...
    shortempty: Any = ...
    def __init__(self, write: Any, indent: int = ..., curindent: int = ..., shortempty: bool = ...) -> None: ...
    def visit(self, node: Any) -> None: ...
    def raw(self, obj: Any) -> None: ...
    def list(self, obj: Any) -> None: ...
    def Tag(self, tag: Any) -> None: ...
    def attributes(self, tag: Any): ...
    def repr_attribute(self, attrs: Any, name: Any): ...
    def getstyle(self, tag: Any): ...

class HtmlVisitor(SimpleUnicodeVisitor):
    single: Any = ...
    inline: Any = ...
    def repr_attribute(self, attrs: Any, name: Any): ...

class _escape:
    escape: Any = ...
    charef_rex: Any = ...
    def __init__(self) -> None: ...
    def __call__(self, ustring: Any): ...

escape: Any
