from StringIO import StringIO
from io import BytesIO as BytesIO
from typing import Any, Optional

TextIO = StringIO

class BytesIO(StringIO):
    def write(self, data: Any) -> None: ...

patchsysdict: Any

class FDCapture:
    targetfd: Any = ...
    tmpfile: Any = ...
    def __init__(self, targetfd: Any, tmpfile: Optional[Any] = ..., now: bool = ..., patchsys: bool = ...) -> None: ...
    def start(self) -> None: ...
    def done(self): ...
    def writeorg(self, data: Any) -> None: ...

def dupfile(f: Any, mode: Optional[Any] = ..., buffering: int = ..., raising: bool = ..., encoding: Optional[Any] = ...): ...

class EncodedFile:
    encoding: Any = ...
    def __init__(self, _stream: Any, encoding: Any) -> None: ...
    def write(self, obj: Any) -> None: ...
    def writelines(self, linelist: Any) -> None: ...
    def __getattr__(self, name: Any): ...

class Capture:
    def call(cls, func: Any, *args: Any, **kwargs: Any): ...
    call: Any = ...
    def reset(self): ...
    def suspend(self): ...

class StdCaptureFD(Capture):
    def __init__(self, out: bool = ..., err: bool = ..., mixed: bool = ..., in_: bool = ..., patchsys: bool = ..., now: bool = ...) -> None: ...
    def startall(self) -> None: ...
    def resume(self) -> None: ...
    def done(self, save: bool = ...): ...
    def readouterr(self): ...

class StdCapture(Capture):
    out: Any = ...
    err: Any = ...
    in_: Any = ...
    def __init__(self, out: bool = ..., err: bool = ..., in_: bool = ..., mixed: bool = ..., now: bool = ...) -> None: ...
    def startall(self) -> None: ...
    def done(self, save: bool = ...): ...
    def resume(self) -> None: ...
    def readouterr(self): ...

class DontReadFromInput:
    def read(self, *args: Any) -> None: ...
    readline: Any = ...
    readlines: Any = ...
    __iter__: Any = ...
    def fileno(self) -> None: ...
    def isatty(self): ...
    def close(self) -> None: ...

devnullpath: Any
