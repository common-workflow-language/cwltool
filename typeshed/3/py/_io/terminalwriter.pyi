import ctypes
from py.builtin import bytes as bytes, text as text
from typing import Any, Optional

py3k: Any
py33: Any
win32_and_ctypes: bool
colorama: Any

def get_terminal_width(): ...

terminal_width: Any
char_width: Any

def get_line_width(text: Any): ...
def ansi_print(text: Any, esc: Any, file: Optional[Any] = ..., newline: bool = ..., flush: bool = ...) -> None: ...
def should_do_markup(file: Any): ...

class TerminalWriter:
    stringio: Any = ...
    encoding: Any = ...
    hasmarkup: Any = ...
    def __init__(self, file: Optional[Any] = ..., stringio: bool = ..., encoding: Optional[Any] = ...) -> None: ...
    @property
    def fullwidth(self): ...
    @fullwidth.setter
    def fullwidth(self, value: Any) -> None: ...
    @property
    def chars_on_current_line(self): ...
    @property
    def width_of_current_line(self): ...
    def markup(self, text: Any, **kw: Any): ...
    def sep(self, sepchar: Any, title: Optional[Any] = ..., fullwidth: Optional[Any] = ..., **kw: Any) -> None: ...
    def write(self, msg: Any, **kw: Any) -> None: ...
    def line(self, s: str = ..., **kw: Any) -> None: ...
    def reline(self, line: Any, **kw: Any) -> None: ...

class Win32ConsoleWriter(TerminalWriter):
    def write(self, msg: Any, **kw: Any) -> None: ...

class WriteFile:
    encoding: Any = ...
    def __init__(self, writemethod: Any, encoding: Optional[Any] = ...) -> None: ...
    def write(self, data: Any) -> None: ...
    def flush(self) -> None: ...
TerminalWriter = Win32ConsoleWriter
STD_OUTPUT_HANDLE: int
STD_ERROR_HANDLE: int
FOREGROUND_BLACK: int
FOREGROUND_BLUE: int
FOREGROUND_GREEN: int
FOREGROUND_RED: int
FOREGROUND_WHITE: int
FOREGROUND_INTENSITY: int
BACKGROUND_BLACK: int
BACKGROUND_BLUE: int
BACKGROUND_GREEN: int
BACKGROUND_RED: int
BACKGROUND_WHITE: int
BACKGROUND_INTENSITY: int
SHORT = ctypes.c_short

class COORD(ctypes.Structure): ...
class SMALL_RECT(ctypes.Structure): ...
class CONSOLE_SCREEN_BUFFER_INFO(ctypes.Structure): ...

def GetStdHandle(kind: Any): ...

SetConsoleTextAttribute: Any

def GetConsoleInfo(handle: Any): ...
def write_out(fil: Any, msg: Any) -> None: ...
