from types import ModuleType as ModuleType
from typing import Any, Optional

cpy_compile = compile

class Source:
    lines: Any = ...
    def __init__(self, *parts: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __getitem__(self, key: Any): ...
    def __len__(self): ...
    def __getslice__(self, start: Any, end: Any): ...
    def strip(self): ...
    def putaround(self, before: str = ..., after: str = ..., indent: Any = ...): ...
    def indent(self, indent: Any = ...): ...
    def getstatement(self, lineno: Any, assertion: bool = ...): ...
    def getstatementrange(self, lineno: Any, assertion: bool = ...): ...
    def deindent(self, offset: Optional[Any] = ...): ...
    def isparseable(self, deindent: bool = ...): ...
    def compile(self, filename: Optional[Any] = ..., mode: str = ..., flag: Any = ..., dont_inherit: int = ..., _genframe: Optional[Any] = ...): ...

def compile_(source: Any, filename: Optional[Any] = ..., mode: str = ..., flags: Any = ..., dont_inherit: int = ...): ...
def getfslineno(obj: Any): ...
def findsource(obj: Any): ...
def getsource(obj: Any, **kwargs: Any): ...
def deindent(lines: Any, offset: Optional[Any] = ...): ...
def get_statement_startend2(lineno: Any, node: Any): ...
def getstatementrange_ast(lineno: Any, source: Any, assertion: bool = ..., astnode: Optional[Any] = ...): ...
def getstatementrange_old(lineno: Any, source: Any, assertion: bool = ...): ...
