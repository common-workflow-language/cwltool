from py._code.assertion import BuiltinAssertionError as BuiltinAssertionError
from typing import Any, Optional

passthroughex: Any

class Failure:
    node: Any = ...
    def __init__(self, node: Any) -> None: ...

class View:
    __view__: Any = ...
    __obj__: Any = ...
    __rootclass__: Any = ...
    __class__: Any = ...
    def __new__(rootclass: Any, obj: Any, *args: Any, **kwds: Any): ...
    def __getattr__(self, attr: Any): ...
    def __viewkey__(self): ...
    def __matchkey__(self, key: Any, subclasses: Any): ...

def enumsubclasses(cls) -> None: ...

class Interpretable(View):
    explanation: Any = ...
    def is_builtin(self, frame: Any): ...
    result: Any = ...
    def eval(self, frame: Any) -> None: ...
    def run(self, frame: Any) -> None: ...
    def nice_explanation(self): ...

class Name(Interpretable):
    __view__: Any = ...
    def is_local(self, frame: Any): ...
    def is_global(self, frame: Any): ...
    def is_builtin(self, frame: Any): ...
    explanation: Any = ...
    def eval(self, frame: Any) -> None: ...

class Compare(Interpretable):
    __view__: Any = ...
    explanation: Any = ...
    result: Any = ...
    def eval(self, frame: Any) -> None: ...

class And(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def eval(self, frame: Any) -> None: ...

class Or(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def eval(self, frame: Any) -> None: ...

keepalive: Any

class UnaryArith(Interpretable):
    __view__: Any = ...
    explanation: Any = ...
    result: Any = ...
    def eval(self, frame: Any, astpattern: Any = ...) -> None: ...

class BinaryArith(Interpretable):
    __view__: Any = ...
    explanation: Any = ...
    result: Any = ...
    def eval(self, frame: Any, astpattern: Any = ...) -> None: ...

class CallFunc(Interpretable):
    __view__: Any = ...
    def is_bool(self, frame: Any): ...
    explanation: Any = ...
    result: Any = ...
    def eval(self, frame: Any) -> None: ...

class Getattr(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def eval(self, frame: Any) -> None: ...

class Assert(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def run(self, frame: Any) -> None: ...

class Assign(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def run(self, frame: Any) -> None: ...

class Discard(Interpretable):
    __view__: Any = ...
    result: Any = ...
    explanation: Any = ...
    def run(self, frame: Any) -> None: ...

class Stmt(Interpretable):
    __view__: Any = ...
    def run(self, frame: Any) -> None: ...

def report_failure(e: Any) -> None: ...
def check(s: Any, frame: Optional[Any] = ...) -> None: ...
def interpret(source: Any, frame: Any, should_fail: bool = ...): ...
def getmsg(excinfo: Any): ...
def getfailure(e: Any): ...
def run(s: Any, frame: Optional[Any] = ...) -> None: ...
