import ast
from py._code.assertion import BuiltinAssertionError as BuiltinAssertionError
from typing import Any, Optional

class Failure(Exception):
    cause: Any = ...
    explanation: Any = ...
    def __init__(self, explanation: str = ...) -> None: ...

def interpret(source: Any, frame: Any, should_fail: bool = ...): ...
def run(offending_line: Any, frame: Optional[Any] = ...): ...
def getfailure(failure: Any): ...

operator_map: Any
unary_map: Any

class DebugInterpreter(ast.NodeVisitor):
    frame: Any = ...
    def __init__(self, frame: Any) -> None: ...
    def generic_visit(self, node: Any): ...
    def visit_Expr(self, expr: Any): ...
    def visit_Module(self, mod: Any) -> None: ...
    def visit_Name(self, name: Any): ...
    def visit_Compare(self, comp: Any): ...
    def visit_BoolOp(self, boolop: Any): ...
    def visit_UnaryOp(self, unary: Any): ...
    def visit_BinOp(self, binop: Any): ...
    def visit_Call(self, call: Any): ...
    def visit_Attribute(self, attr: Any): ...
    def visit_Assert(self, assrt: Any): ...
    def visit_Assign(self, assign: Any): ...
