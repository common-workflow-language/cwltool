import py
from py._path import common as common
from typing import Any, Optional

class cache:
    proplist: Any = ...
    info: Any = ...
    entries: Any = ...
    prop: Any = ...

class RepoEntry:
    url: Any = ...
    rev: Any = ...
    timestamp: Any = ...
    def __init__(self, url: Any, rev: Any, timestamp: Any) -> None: ...

class RepoCache:
    timeout: int = ...
    repos: Any = ...
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def put(self, url: Any, rev: Any, timestamp: Optional[Any] = ...) -> None: ...
    def get(self, url: Any): ...

repositories: Any
ALLOWED_CHARS: str
ALLOWED_CHARS_HOST: Any

def checkbadchars(url: Any) -> None: ...

class SvnPathBase(common.PathBase):
    sep: str = ...
    url: Any = ...
    def __hash__(self) -> Any: ...
    def new(self, **kw: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def join(self, *args: Any): ...
    def propget(self, name: Any): ...
    def proplist(self): ...
    def size(self): ...
    def mtime(self): ...
    class Checkers(common.Checkers):
        def dir(self): ...
        def file(self): ...
        def exists(self): ...

def parse_apr_time(timestr: Any): ...

class PropListDict(dict):
    path: Any = ...
    def __init__(self, path: Any, keynames: Any) -> None: ...
    def __getitem__(self, key: Any): ...

def fixlocale(): ...

ILLEGAL_CHARS: Any
ISWINDOWS: Any

def path_to_fspath(path: Any, addat: bool = ...): ...
def url_from_path(path: Any): ...

class SvnAuth:
    username: Any = ...
    password: Any = ...
    cache_auth: Any = ...
    interactive: Any = ...
    def __init__(self, username: Any, password: Any, cache_auth: bool = ..., interactive: bool = ...) -> None: ...
    def makecmdoptions(self): ...

rex_blame: Any

class SvnWCCommandPath(common.PathBase):
    sep: Any = ...
    localpath: Any = ...
    auth: Any = ...
    def __new__(cls, wcpath: Optional[Any] = ..., auth: Optional[Any] = ...): ...
    strpath: Any = ...
    rev: Any = ...
    def __eq__(self, other: Any) -> Any: ...
    url: Any = ...
    def dump(self, obj: Any): ...
    def svnurl(self): ...
    def switch(self, url: Any) -> None: ...
    def checkout(self, url: Optional[Any] = ..., rev: Optional[Any] = ...) -> None: ...
    def update(self, rev: str = ..., interactive: bool = ...) -> None: ...
    def write(self, content: Any, mode: str = ...) -> None: ...
    def ensure(self, *args: Any, **kwargs: Any): ...
    def mkdir(self, *args: Any): ...
    def add(self) -> None: ...
    def remove(self, rec: int = ..., force: int = ...) -> None: ...
    def copy(self, target: Any) -> None: ...
    def rename(self, target: Any) -> None: ...
    def lock(self) -> None: ...
    def unlock(self) -> None: ...
    def cleanup(self) -> None: ...
    def status(self, updates: int = ..., rec: int = ..., externals: int = ...): ...
    def diff(self, rev: Optional[Any] = ...): ...
    def blame(self): ...
    def commit(self, msg: str = ..., rec: int = ...): ...
    def propset(self, name: Any, value: Any, *args: Any) -> None: ...
    def propget(self, name: Any): ...
    def propdel(self, name: Any): ...
    def proplist(self, rec: int = ...): ...
    def revert(self, rec: int = ...): ...
    def new(self, **kw: Any): ...
    def join(self, *args: Any, **kwargs: Any): ...
    def info(self, usecache: int = ...): ...
    def listdir(self, fil: Optional[Any] = ..., sort: Optional[Any] = ...): ...
    def open(self, mode: str = ...): ...
    def log(self, rev_start: Optional[Any] = ..., rev_end: int = ..., verbose: bool = ...): ...
    def size(self): ...
    def mtime(self): ...
    def __hash__(self) -> Any: ...

class WCStatus:
    attrnames: Any = ...
    wcpath: Any = ...
    rev: Any = ...
    modrev: Any = ...
    author: Any = ...
    def __init__(self, wcpath: Any, rev: Optional[Any] = ..., modrev: Optional[Any] = ..., author: Optional[Any] = ...) -> None: ...
    def allpath(self, sort: bool = ..., **kw: Any): ...
    def fromstring(data: Any, rootwcpath: Any, rev: Optional[Any] = ..., modrev: Optional[Any] = ..., author: Optional[Any] = ...): ...

class XMLWCStatus(WCStatus):
    def fromstring(data: Any, rootwcpath: Any, rev: Optional[Any] = ..., modrev: Optional[Any] = ..., author: Optional[Any] = ...): ...

class InfoSvnWCCommand:
    url: Any = ...
    kind: Any = ...
    rev: Any = ...
    path: Any = ...
    size: Any = ...
    created_rev: Any = ...
    last_author: Any = ...
    mtime: Any = ...
    time: Any = ...
    def __init__(self, output: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...

def parse_wcinfotime(timestr: Any): ...
def make_recursive_propdict(wcroot: Any, output: Any, rex: Any = ...): ...
def importxml(cache: Any = ...): ...

class LogEntry:
    rev: Any = ...
    author: Any = ...
    msg: Any = ...
    date: Any = ...
    strpaths: Any = ...
    def __init__(self, logentry: Any) -> None: ...
